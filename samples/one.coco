Semantic
{

  forbid ident{value in ['px', 'pt', 'cm']}
  message 'Use em instead of pt, px, cm'

  forbid property{name=='z-index'}
  message 'Avoid using z-index property'

  forbid important
  message 'Do not use !important'

  forbid id
  message 'Avoid using ids'

  find p=(id or class)
  require p.name match lowercase
  message 'All id and class names should be lowercase'

  find p=property{is-vendor-specific == false}
  require p.name match lowercase
  message 'Properties should be lowercase (vendor-specific properties are exception)'

  find value=(not string) in value
  require value.string match lowercase
  message 'All values except the contents of strings should be lowercase'

  find t=tag
  require t.name match lowercase
  message 'Html tags should be lowercase'
/* Fix the element
  find d=declaration
  require d.child(-1).string == ';'
  message 'Put a ; at the end of declarations'
*/
  forbid string in uri
  message 'Do not put quotes in url declarations'

  forbid hex{is-long and string match shorten}
  message 'Use short hex values'

  forbid ruleset{contains-all([
    property{name=='margin-right'},
    property{name=='margin-left'},
    property{name=='margin-top'},
    property{name=='margin-bottom'}
  ])}
  message 'Use the shorthand margin property instead'

  forbid number{value == 0} in (dimension or percentage)
  message 'Do not use units after 0 values'

  find n=number{value < 1 and value > -1}
  require n.string match '^0.*'
  message 'Use a leading zero for decimal values'


  find v=attribute-value
  require v is string and v.has-single-quotes
  message 'Use single quotes in attribute selectors'

  find s=string in charset
  require s.has-single-quotes
  message 'Use single quotes in charsets'

  find s=string in value
  require s.has-single-quotes
  message 'Use single quotes in values'

  forbid charset
  message 'Do not specify the encoding of style sheets as these assume UTF-8.'

  find r=raw in uri
  require r.string not match '(?i)https?:.*'
  message 'Omit the protocol http(s) in url'

  forbid tag next-to (class or id)
  message 'Do not over-qualify classes and ids with html tags'

  forbid import
  message 'Do not use @import'

  forbid ruleset{contains(property{name=='width'})
                 and contains(property{name in ['border',
                     'border-left',
                     'border-right',
                     'padding',
                     'padding-left',
                     'padding-right']})
                }
  message 'Warning if a rule contains width and border, border-left, border-right, padding, padding-left, or padding-right'

  forbid ruleset{contains(property{name=='height'})
                 and contains(property{name in ['border',
                     'border-top',
                     'border-bottom',
                     'padding',
                     'padding-top',
                     'padding-bottom']})
                }
  message 'Warning if a rule contains height and border, border-top, border-bottom, padding, padding-top, or padding-bottom'

  forbid ruleset{contains(declaration{property.name=='display' and value.string=='inline-block'})
                 and contains(property{name=='float'})}
  message 'A rule that has display: inline-block should not use float.'

  forbid ruleset{contains(declaration{property.name=='display' and value.string=='block'})
                 and contains(property{name=='vertical-align'})}
  message 'A rule that has display: block should not use vertical-align'

  find (d1=declaration, d2=declaration) in ruleset
  forbid d1.property.name == d2.property.name and
         d1.value.string == d2.value.string
  message 'Warning if a property is included in a rule twice and contains the same value.'

  find (d1=declaration, d2=declaration, d3=declaration) in ruleset
  forbid d1.property.name == d3.property.name and
         d2.property.name != d1.property.name and
         d1.value.string != d3.value.string
  message 'A property is included twice and is separated by at least one other property.'

  forbid ruleset{count(declaration) == 0}
  message 'Forbid empty rules.'

  find d=declaration{property.is-vendor-specific}
  require d.next-sibling is declaration and
          ((d.next-sibling.is-vendor-specific and d.next-sibling.property.standard == d.property.standard) or
           (not d.next-sibling.is-vendor-specific and d.next-sibling.property.standard == d.property.standard))
  message 'Warning if found a vendor-prefixed property without a standard property after it.'


  find (rgba or hsl or hsla) in d=declaration{property.name == 'color'}
  require d.previous-sibling is declaration and
          d.previous-sibling.property.name == 'color' and
         (d.previous-sibling.contains(hex) or d.previous-sibling.contains(color-text))
  message 'No fallback color for properties with a rgba(), hsl(), or hsla() color.'
}

Whitespace
{

  find r1=ruleset next-to r2=ruleset
  require newline{2,3} between r1 and r2
  message 'Put one or two blank lines between rules'

  find c=colon next-to v=value
  require space between c and v
  message 'Put one space between the colon and the value of a declaration.'

  find s=selector next-to b=block
  require space between s and b
  message 'Put one space between the last selector and the block.'

  find s1=delim next-to s2=simpleselector
  require newline between s1 and s2
  message 'One selector per line.'
}

Custom
{

  forbid (space or indent) next-to (newline or eof)
  message 'No trailing spaces.'

  find i=indent
  require i.string match '^ {4}$'
  message 'Use 4 spaces for indentation, no tabs.'

}

