# Generated from java-escape by ANTLR 4.4
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2 ")
        buf.write("\u00e0\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\6\3\6")
        buf.write("\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\5\32\u0094\n\32\3\33\3\33\3\34\3\34\3\34\3\35\3")
        buf.write("\35\3\36\3\36\5\36\u009f\n\36\3\37\3\37\3 \3 \3!\3!\3")
        buf.write("!\3!\7!\u00a9\n!\f!\16!\u00ac\13!\3\"\3\"\3\"\7\"\u00b1")
        buf.write("\n\"\f\"\16\"\u00b4\13\"\5\"\u00b6\n\"\3#\3#\7#\u00ba")
        buf.write("\n#\f#\16#\u00bd\13#\3#\3#\3$\3$\3$\3$\7$\u00c5\n$\f$")
        buf.write("\16$\u00c8\13$\3$\3$\3$\3$\3$\3%\3%\3%\3%\7%\u00d3\n%")
        buf.write("\f%\16%\u00d6\13%\3%\3%\3&\6&\u00db\n&\r&\16&\u00dc\3")
        buf.write("&\3&\4\u00bb\u00c6\2\'\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21")
        buf.write("\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24")
        buf.write("\'\25)\26+\27-\30/\31\61\32\63\2\65\2\67\29\2;\2=\2?\2")
        buf.write("A\33C\34E\35G\36I\37K \3\2\n\3\2^^\3\2))\4\2C\\c|\3\2")
        buf.write("\63;\3\2\62\62\4\2//aa\4\2\f\f\17\17\5\2\13\f\17\17\"")
        buf.write("\"\u00e3\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2A\3\2\2\2\2C\3\2\2")
        buf.write("\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\3M\3\2")
        buf.write("\2\2\5P\3\2\2\2\7R\3\2\2\2\tU\3\2\2\2\13W\3\2\2\2\rZ\3")
        buf.write("\2\2\2\17\\\3\2\2\2\21^\3\2\2\2\23`\3\2\2\2\25b\3\2\2")
        buf.write("\2\27d\3\2\2\2\31g\3\2\2\2\33j\3\2\2\2\35q\3\2\2\2\37")
        buf.write("w\3\2\2\2!z\3\2\2\2#|\3\2\2\2%\177\3\2\2\2\'\u0081\3\2")
        buf.write("\2\2)\u0085\3\2\2\2+\u0087\3\2\2\2-\u0089\3\2\2\2/\u008d")
        buf.write("\3\2\2\2\61\u008f\3\2\2\2\63\u0093\3\2\2\2\65\u0095\3")
        buf.write("\2\2\2\67\u0097\3\2\2\29\u009a\3\2\2\2;\u009e\3\2\2\2")
        buf.write("=\u00a0\3\2\2\2?\u00a2\3\2\2\2A\u00a4\3\2\2\2C\u00b5\3")
        buf.write("\2\2\2E\u00b7\3\2\2\2G\u00c0\3\2\2\2I\u00ce\3\2\2\2K\u00da")
        buf.write("\3\2\2\2MN\7#\2\2NO\7?\2\2O\4\3\2\2\2PQ\7]\2\2Q\6\3\2")
        buf.write("\2\2RS\7@\2\2ST\7?\2\2T\b\3\2\2\2UV\7}\2\2V\n\3\2\2\2")
        buf.write("WX\7?\2\2XY\7?\2\2Y\f\3\2\2\2Z[\7>\2\2[\16\3\2\2\2\\]")
        buf.write("\7_\2\2]\20\3\2\2\2^_\7?\2\2_\22\3\2\2\2`a\7\177\2\2a")
        buf.write("\24\3\2\2\2bc\7@\2\2c\26\3\2\2\2de\7q\2\2ef\7t\2\2f\30")
        buf.write("\3\2\2\2gh\7>\2\2hi\7?\2\2i\32\3\2\2\2jk\7h\2\2kl\7q\2")
        buf.write("\2lm\7t\2\2mn\7d\2\2no\7k\2\2op\7f\2\2p\34\3\2\2\2qr\7")
        buf.write("o\2\2rs\7c\2\2st\7v\2\2tu\7e\2\2uv\7j\2\2v\36\3\2\2\2")
        buf.write("wx\7k\2\2xy\7p\2\2y \3\2\2\2z{\7*\2\2{\"\3\2\2\2|}\7k")
        buf.write("\2\2}~\7u\2\2~$\3\2\2\2\177\u0080\7+\2\2\u0080&\3\2\2")
        buf.write("\2\u0081\u0082\7c\2\2\u0082\u0083\7p\2\2\u0083\u0084\7")
        buf.write("f\2\2\u0084(\3\2\2\2\u0085\u0086\7-\2\2\u0086*\3\2\2\2")
        buf.write("\u0087\u0088\7.\2\2\u0088,\3\2\2\2\u0089\u008a\7p\2\2")
        buf.write("\u008a\u008b\7q\2\2\u008b\u008c\7v\2\2\u008c.\3\2\2\2")
        buf.write("\u008d\u008e\7/\2\2\u008e\60\3\2\2\2\u008f\u0090\7\60")
        buf.write("\2\2\u0090\62\3\2\2\2\u0091\u0094\5\67\34\2\u0092\u0094")
        buf.write("\n\2\2\2\u0093\u0091\3\2\2\2\u0093\u0092\3\2\2\2\u0094")
        buf.write("\64\3\2\2\2\u0095\u0096\t\3\2\2\u0096\66\3\2\2\2\u0097")
        buf.write("\u0098\7^\2\2\u0098\u0099\5\65\33\2\u00998\3\2\2\2\u009a")
        buf.write("\u009b\t\4\2\2\u009b:\3\2\2\2\u009c\u009f\5? \2\u009d")
        buf.write("\u009f\5=\37\2\u009e\u009c\3\2\2\2\u009e\u009d\3\2\2\2")
        buf.write("\u009f<\3\2\2\2\u00a0\u00a1\t\5\2\2\u00a1>\3\2\2\2\u00a2")
        buf.write("\u00a3\t\6\2\2\u00a3@\3\2\2\2\u00a4\u00aa\59\35\2\u00a5")
        buf.write("\u00a9\59\35\2\u00a6\u00a9\5;\36\2\u00a7\u00a9\t\7\2\2")
        buf.write("\u00a8\u00a5\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a8\u00a7\3")
        buf.write("\2\2\2\u00a9\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab")
        buf.write("\3\2\2\2\u00abB\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00b6")
        buf.write("\5? \2\u00ae\u00b2\5=\37\2\u00af\u00b1\5;\36\2\u00b0\u00af")
        buf.write("\3\2\2\2\u00b1\u00b4\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2")
        buf.write("\u00b3\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2")
        buf.write("\u00b5\u00ad\3\2\2\2\u00b5\u00ae\3\2\2\2\u00b6D\3\2\2")
        buf.write("\2\u00b7\u00bb\5\65\33\2\u00b8\u00ba\5\63\32\2\u00b9\u00b8")
        buf.write("\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bb")
        buf.write("\u00b9\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd\u00bb\3\2\2\2")
        buf.write("\u00be\u00bf\5\65\33\2\u00bfF\3\2\2\2\u00c0\u00c1\7\61")
        buf.write("\2\2\u00c1\u00c2\7,\2\2\u00c2\u00c6\3\2\2\2\u00c3\u00c5")
        buf.write("\13\2\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6")
        buf.write("\u00c7\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7\u00c9\3\2\2\2")
        buf.write("\u00c8\u00c6\3\2\2\2\u00c9\u00ca\7,\2\2\u00ca\u00cb\7")
        buf.write("\61\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\b$\2\2\u00cdH")
        buf.write("\3\2\2\2\u00ce\u00cf\7\61\2\2\u00cf\u00d0\7\61\2\2\u00d0")
        buf.write("\u00d4\3\2\2\2\u00d1\u00d3\n\b\2\2\u00d2\u00d1\3\2\2\2")
        buf.write("\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3")
        buf.write("\2\2\2\u00d5\u00d7\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d8")
        buf.write("\b%\2\2\u00d8J\3\2\2\2\u00d9\u00db\t\t\2\2\u00da\u00d9")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc")
        buf.write("\u00dd\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00df\b&\2\2")
        buf.write("\u00dfL\3\2\2\2\r\2\u0093\u009e\u00a8\u00aa\u00b2\u00b5")
        buf.write("\u00bb\u00c6\u00d4\u00dc\3\b\2\2")
        return buf.getvalue()
		

class cocoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__23 = 1
    T__22 = 2
    T__21 = 3
    T__20 = 4
    T__19 = 5
    T__18 = 6
    T__17 = 7
    T__16 = 8
    T__15 = 9
    T__14 = 10
    T__13 = 11
    T__12 = 12
    T__11 = 13
    T__10 = 14
    T__9 = 15
    T__8 = 16
    T__7 = 17
    T__6 = 18
    T__5 = 19
    T__4 = 20
    T__3 = 21
    T__2 = 22
    T__1 = 23
    T__0 = 24
    Identifier = 25
    Integer = 26
    String = 27
    Comment = 28
    LineComment = 29
    WS = 30


    modeNames = [ "DEFAULT_MODE" ]

    tokenNames = [ "<INVALID>",
            "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", 
            "'\\u0005'", "'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", 
            "'\\u000B'", "'\f'", "'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", 
            "'\\u0011'", "'\\u0012'", "'\\u0013'", "'\\u0014'", "'\\u0015'", 
            "'\\u0016'", "'\\u0017'", "'\\u0018'", "'\\u0019'", "'\\u001A'", 
            "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'" ]

    ruleNames = [ "T__23", "T__22", "T__21", "T__20", "T__19", "T__18", 
                  "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", 
                  "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
                  "T__4", "T__3", "T__2", "T__1", "T__0", "StringCharacter", 
                  "Quote", "EscapeSequence", "Letter", "Digit", "NonZeroDigit", 
                  "ZeroDigit", "Identifier", "Integer", "String", "Comment", 
                  "LineComment", "WS" ]

    grammarFileName = "coco.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.4")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


