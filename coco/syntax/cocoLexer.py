# Generated from java-escape by ANTLR 4.4
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2!")
        buf.write("\u00ea\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6")
        buf.write("\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3")
        buf.write("\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u009e")
        buf.write("\n\33\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\37\3\37\5\37")
        buf.write("\u00a9\n\37\3 \3 \3!\3!\3\"\3\"\3\"\3\"\7\"\u00b3\n\"")
        buf.write("\f\"\16\"\u00b6\13\"\3#\3#\3#\7#\u00bb\n#\f#\16#\u00be")
        buf.write("\13#\5#\u00c0\n#\3$\3$\7$\u00c4\n$\f$\16$\u00c7\13$\3")
        buf.write("$\3$\3%\3%\3%\3%\7%\u00cf\n%\f%\16%\u00d2\13%\3%\3%\3")
        buf.write("%\3%\3%\3&\3&\3&\3&\7&\u00dd\n&\f&\16&\u00e0\13&\3&\3")
        buf.write("&\3\'\6\'\u00e5\n\'\r\'\16\'\u00e6\3\'\3\'\4\u00c5\u00d0")
        buf.write("\2(\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\2\67\29\2;\2=\2?\2A\2C\34E\35G\36")
        buf.write("I\37K M!\3\2\n\3\2^^\3\2))\4\2C\\c|\3\2\63;\3\2\62\62")
        buf.write("\4\2//aa\4\2\f\f\17\17\5\2\13\f\17\17\"\"\u00ed\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2")
        buf.write("\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\3O\3\2\2")
        buf.write("\2\5R\3\2\2\2\7T\3\2\2\2\tV\3\2\2\2\13X\3\2\2\2\r[\3\2")
        buf.write("\2\2\17b\3\2\2\2\21d\3\2\2\2\23g\3\2\2\2\25i\3\2\2\2\27")
        buf.write("k\3\2\2\2\31m\3\2\2\2\33p\3\2\2\2\35s\3\2\2\2\37u\3\2")
        buf.write("\2\2!w\3\2\2\2#y\3\2\2\2%|\3\2\2\2\'\u0082\3\2\2\2)\u0085")
        buf.write("\3\2\2\2+\u008d\3\2\2\2-\u008f\3\2\2\2/\u0093\3\2\2\2")
        buf.write("\61\u0095\3\2\2\2\63\u0099\3\2\2\2\65\u009d\3\2\2\2\67")
        buf.write("\u009f\3\2\2\29\u00a1\3\2\2\2;\u00a4\3\2\2\2=\u00a8\3")
        buf.write("\2\2\2?\u00aa\3\2\2\2A\u00ac\3\2\2\2C\u00ae\3\2\2\2E\u00bf")
        buf.write("\3\2\2\2G\u00c1\3\2\2\2I\u00ca\3\2\2\2K\u00d8\3\2\2\2")
        buf.write("M\u00e4\3\2\2\2OP\7#\2\2PQ\7?\2\2Q\4\3\2\2\2RS\7}\2\2")
        buf.write("S\6\3\2\2\2TU\7?\2\2U\b\3\2\2\2VW\7\177\2\2W\n\3\2\2\2")
        buf.write("XY\7>\2\2YZ\7?\2\2Z\f\3\2\2\2[\\\7h\2\2\\]\7q\2\2]^\7")
        buf.write("t\2\2^_\7d\2\2_`\7k\2\2`a\7f\2\2a\16\3\2\2\2bc\7*\2\2")
        buf.write("c\20\3\2\2\2de\7k\2\2ef\7u\2\2f\22\3\2\2\2gh\7.\2\2h\24")
        buf.write("\3\2\2\2ij\7\60\2\2j\26\3\2\2\2kl\7]\2\2l\30\3\2\2\2m")
        buf.write("n\7@\2\2no\7?\2\2o\32\3\2\2\2pq\7?\2\2qr\7?\2\2r\34\3")
        buf.write("\2\2\2st\7>\2\2t\36\3\2\2\2uv\7_\2\2v \3\2\2\2wx\7@\2")
        buf.write("\2x\"\3\2\2\2yz\7q\2\2z{\7t\2\2{$\3\2\2\2|}\7o\2\2}~\7")
        buf.write("c\2\2~\177\7v\2\2\177\u0080\7e\2\2\u0080\u0081\7j\2\2")
        buf.write("\u0081&\3\2\2\2\u0082\u0083\7k\2\2\u0083\u0084\7p\2\2")
        buf.write("\u0084(\3\2\2\2\u0085\u0086\7o\2\2\u0086\u0087\7g\2\2")
        buf.write("\u0087\u0088\7u\2\2\u0088\u0089\7u\2\2\u0089\u008a\7c")
        buf.write("\2\2\u008a\u008b\7i\2\2\u008b\u008c\7g\2\2\u008c*\3\2")
        buf.write("\2\2\u008d\u008e\7+\2\2\u008e,\3\2\2\2\u008f\u0090\7c")
        buf.write("\2\2\u0090\u0091\7p\2\2\u0091\u0092\7f\2\2\u0092.\3\2")
        buf.write("\2\2\u0093\u0094\7-\2\2\u0094\60\3\2\2\2\u0095\u0096\7")
        buf.write("p\2\2\u0096\u0097\7q\2\2\u0097\u0098\7v\2\2\u0098\62\3")
        buf.write("\2\2\2\u0099\u009a\7/\2\2\u009a\64\3\2\2\2\u009b\u009e")
        buf.write("\59\35\2\u009c\u009e\n\2\2\2\u009d\u009b\3\2\2\2\u009d")
        buf.write("\u009c\3\2\2\2\u009e\66\3\2\2\2\u009f\u00a0\t\3\2\2\u00a0")
        buf.write("8\3\2\2\2\u00a1\u00a2\7^\2\2\u00a2\u00a3\5\67\34\2\u00a3")
        buf.write(":\3\2\2\2\u00a4\u00a5\t\4\2\2\u00a5<\3\2\2\2\u00a6\u00a9")
        buf.write("\5A!\2\u00a7\u00a9\5? \2\u00a8\u00a6\3\2\2\2\u00a8\u00a7")
        buf.write("\3\2\2\2\u00a9>\3\2\2\2\u00aa\u00ab\t\5\2\2\u00ab@\3\2")
        buf.write("\2\2\u00ac\u00ad\t\6\2\2\u00adB\3\2\2\2\u00ae\u00b4\5")
        buf.write(";\36\2\u00af\u00b3\5;\36\2\u00b0\u00b3\5=\37\2\u00b1\u00b3")
        buf.write("\t\7\2\2\u00b2\u00af\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2")
        buf.write("\u00b1\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2")
        buf.write("\u00b4\u00b5\3\2\2\2\u00b5D\3\2\2\2\u00b6\u00b4\3\2\2")
        buf.write("\2\u00b7\u00c0\5A!\2\u00b8\u00bc\5? \2\u00b9\u00bb\5=")
        buf.write("\37\2\u00ba\u00b9\3\2\2\2\u00bb\u00be\3\2\2\2\u00bc\u00ba")
        buf.write("\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00c0\3\2\2\2\u00be")
        buf.write("\u00bc\3\2\2\2\u00bf\u00b7\3\2\2\2\u00bf\u00b8\3\2\2\2")
        buf.write("\u00c0F\3\2\2\2\u00c1\u00c5\5\67\34\2\u00c2\u00c4\5\65")
        buf.write("\33\2\u00c3\u00c2\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5\u00c6")
        buf.write("\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c6\u00c8\3\2\2\2\u00c7")
        buf.write("\u00c5\3\2\2\2\u00c8\u00c9\5\67\34\2\u00c9H\3\2\2\2\u00ca")
        buf.write("\u00cb\7\61\2\2\u00cb\u00cc\7,\2\2\u00cc\u00d0\3\2\2\2")
        buf.write("\u00cd\u00cf\13\2\2\2\u00ce\u00cd\3\2\2\2\u00cf\u00d2")
        buf.write("\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d1")
        buf.write("\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d3\u00d4\7,\2\2")
        buf.write("\u00d4\u00d5\7\61\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d7")
        buf.write("\b%\2\2\u00d7J\3\2\2\2\u00d8\u00d9\7\61\2\2\u00d9\u00da")
        buf.write("\7\61\2\2\u00da\u00de\3\2\2\2\u00db\u00dd\n\b\2\2\u00dc")
        buf.write("\u00db\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2")
        buf.write("\u00de\u00df\3\2\2\2\u00df\u00e1\3\2\2\2\u00e0\u00de\3")
        buf.write("\2\2\2\u00e1\u00e2\b&\2\2\u00e2L\3\2\2\2\u00e3\u00e5\t")
        buf.write("\t\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e4")
        buf.write("\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8")
        buf.write("\u00e9\b\'\2\2\u00e9N\3\2\2\2\r\2\u009d\u00a8\u00b2\u00b4")
        buf.write("\u00bc\u00bf\u00c5\u00d0\u00de\u00e6\3\b\2\2")
        return buf.getvalue()
		

class cocoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__24 = 1
    T__23 = 2
    T__22 = 3
    T__21 = 4
    T__20 = 5
    T__19 = 6
    T__18 = 7
    T__17 = 8
    T__16 = 9
    T__15 = 10
    T__14 = 11
    T__13 = 12
    T__12 = 13
    T__11 = 14
    T__10 = 15
    T__9 = 16
    T__8 = 17
    T__7 = 18
    T__6 = 19
    T__5 = 20
    T__4 = 21
    T__3 = 22
    T__2 = 23
    T__1 = 24
    T__0 = 25
    Identifier = 26
    Integer = 27
    String = 28
    Comment = 29
    LineComment = 30
    WS = 31


    modeNames = [ "DEFAULT_MODE" ]

    tokenNames = [ "<INVALID>",
            "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", 
            "'\\u0005'", "'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", 
            "'\\u000B'", "'\f'", "'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", 
            "'\\u0011'", "'\\u0012'", "'\\u0013'", "'\\u0014'", "'\\u0015'", 
            "'\\u0016'", "'\\u0017'", "'\\u0018'", "'\\u0019'", "'\\u001A'", 
            "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", "'\\u001F'" ]

    ruleNames = [ "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
                  "T__18", "T__17", "T__16", "T__15", "T__14", "T__13", 
                  "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", 
                  "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "StringCharacter", 
                  "Quote", "EscapeSequence", "Letter", "Digit", "NonZeroDigit", 
                  "ZeroDigit", "Identifier", "Integer", "String", "Comment", 
                  "LineComment", "WS" ]

    grammarFileName = "coco.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.4")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


